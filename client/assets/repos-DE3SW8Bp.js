import{d as p,e as n,f as h}from"./index-CjrCo1eI.js";const y={repositories:[],selectedRepo:{data:null,status:"idle",error:null},status:"idle",error:null},c=p("github/fetchRepositories",async({login:o,token:e},{rejectWithValue:s})=>{var t,a;try{return(await n.get(`https://api.github.com/users/${o}/repos`,{headers:{Authorization:`token ${e}`}})).data}catch(r){return s(((a=(t=r.response)==null?void 0:t.data)==null?void 0:a.message)||"Ошибка при загрузке репозиториев")}}),f=p("repo/updateRepository",async({login:o,token:e,repoName:s,data:t},{rejectWithValue:a})=>{var r,i;try{return(await n.patch(`https://api.github.com/repos/${o}/${s}`,t,{headers:{Authorization:`token ${e}`}})).data}catch(d){return a(((i=(r=d.response)==null?void 0:r.data)==null?void 0:i.message)||"Ошибка при обновлении репозитория")}}),g=p("repo/deleteRepository",async({login:o,token:e,repoName:s},{rejectWithValue:t})=>{var a,r;try{return await n.delete(`https://api.github.com/repos/${o}/${s}`,{headers:{Authorization:`token ${e}`}}),s}catch(i){return t(((r=(a=i.response)==null?void 0:a.data)==null?void 0:r.message)||"Ошибка при удалении репозитория")}}),l=p("repo/fetchRepositoryDetails",async({login:o,token:e,repoName:s},{rejectWithValue:t})=>{var a,r;try{return(await n.get(`https://api.github.com/repos/${o}/${s}`,{headers:{Authorization:`token ${e}`}})).data}catch(i){return t(((r=(a=i.response)==null?void 0:a.data)==null?void 0:r.message)||"Ошибка при получении данных репозитория")}}),R=p("repo/createRepository",async({login:o,token:e,name:s,description:t,visibility:a},{rejectWithValue:r})=>{var i,d;try{return(await n.post("https://api.github.com/user/repos",{name:s,description:t,private:a==="private"},{headers:{Authorization:`token ${e}`}})).data}catch(u){return r(((d=(i=u.response)==null?void 0:i.data)==null?void 0:d.message)||"Ошибка при создании репозитория")}}),m=h({name:"repo",initialState:y,reducers:{},extraReducers:o=>{o.addCase(c.pending,e=>{e.status="loading"}).addCase(c.fulfilled,(e,s)=>{e.status="succeeded",e.repositories=s.payload}).addCase(c.rejected,(e,s)=>{e.status="failed",e.error=s.payload}).addCase(f.fulfilled,(e,s)=>{e.repositories=e.repositories.map(t=>t.id===s.payload.id?s.payload:t)}).addCase(g.fulfilled,(e,s)=>{e.repositories=e.repositories.filter(t=>t.name!==s.payload)}).addCase(l.fulfilled,(e,s)=>{e.selectedRepo.status="succeeded",e.selectedRepo.data=s.payload}).addCase(l.pending,e=>{e.selectedRepo.status="loading"}).addCase(l.rejected,e=>{e.selectedRepo.error="failed"}).addCase(R.fulfilled,(e,s)=>{e.repositories=[s.payload,...e.repositories]})}}),C=m.reducer;export{c as a,R as c,g as d,l as f,C as r,f as u};
